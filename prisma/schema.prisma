// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials auth
  pin           String?   // For PIN auth (hashed)
  balance       Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations for financial data
  budgets       Budget[]
  bills         Bill[]
  transactions  Transaction[]
  recurringBills RecurringBill[]

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Budget {
  id        String   @id @default(cuid())
  userId    String
  month     String   // e.g., "october-2025"
  year      Int
  income    Float    @default(0)
  expenses  Float    @default(0)
  savings   Float    @default(0)
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bills Bill[]

  @@unique([userId, month, year])
  @@map("budgets")
}

model Bill {
  id          String   @id @default(cuid())
  userId      String
  budgetId    String?
  name        String
  amount      Float
  dueDate     DateTime
  category    String   // e.g., "utilities", "insurance", "entertainment"
  isRecurring Boolean  @default(false)
  isPaid      Boolean  @default(false)
  isIncome    Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  budget Budget? @relation(fields: [budgetId], references: [id], onDelete: SetNull)

  @@map("bills")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "income" or "expense"
  amount      Float
  description String?
  category    String?
  date        DateTime
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model FinancialGoal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  targetAmount Float
  currentAmount Float   @default(0)
  deadline    DateTime?
  category    String   // e.g., "emergency", "savings", "debt"
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("financial_goals")
}

model RecurringBill {
  id                    String   @id @default(cuid())
  userId                String
  name                  String
  amount                Float    // Keep existing amount field for now
  baseAmount            Float?   // Base/estimated amount (initially nullable for migration)
  frequency             String   // "monthly", "weekly", "biweekly"
  category              String
  startDate             DateTime
  endDate               DateTime?
  isActive              Boolean  @default(true)
  isVariableAmount      Boolean  @default(false)  // True for bills like Verizon that vary monthly
  averageAmount         Float?   // Calculated average from bill history
  minAmount             Float?   // Historical minimum amount
  maxAmount             Float?   // Historical maximum amount
  lastBillAmount        Float?   // Most recent actual bill amount
  estimationMethod      String   @default("base") // "base", "average", "lastBill"
  notes                 String?  // Notes about variable billing
  provider              String?  // e.g., "Verizon", "ConEd", "National Grid"
  billType              String   @default("expense") // "expense", "income"
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  billHistory BillHistory[]

  @@map("recurring_bills")
}

model BillHistory {
  id              String        @id @default(cuid())
  recurringBillId String
  actualAmount    Float         // Actual amount paid/billed
  estimatedAmount Float         // What we estimated vs actual
  billDate        DateTime      // When the bill was due/paid
  isPaid          Boolean       @default(false)
  paidDate        DateTime?     // When it was actually paid
  variance        Float         // actualAmount - estimatedAmount
  variancePercent Float         // (variance / estimatedAmount) * 100
  notes           String?       // Notes about this specific bill
  paymentMethod   String?       // How it was paid
  transactionId   String?       // Link to actual transaction if exists
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  recurringBill RecurringBill @relation(fields: [recurringBillId], references: [id], onDelete: Cascade)

  @@map("bill_history")
}