/**\n * Enhanced Dashboard Component - Production-Ready\n * \n * This component integrates all advanced features including:\n * - Performance monitoring\n * - Error logging\n * - Offline support\n * - Security enhancements\n * - Advanced UI components\n * - Accessibility features\n * \n * @version 1.0.0\n * @author Astral Money Team\n */\n\n'use client';\n\nimport React, { useState, useEffect, useCallback, Suspense, lazy } from 'react';\nimport { useAppContext } from '@/contexts/AppContext';\nimport { performanceMonitor, errorLogger, userActionTracker } from '@/utils/monitoring';\nimport { InputSanitizer, SecurityUtils } from '@/utils/security';\nimport OfflineStorage from '@/utils/indexedDB';\nimport undoRedoManager from '@/utils/undoRedo';\nimport { DashboardSkeleton, LoadingSpinner } from '@/components/ui/SkeletonLoader';\nimport QuickActions from '@/components/ui/QuickActions';\nimport { Tooltip, HelpButton, HelpProvider } from '@/components/ui/HelpSystem';\n\n// Lazy load heavy components for better performance\nconst AdvancedCharts = lazy(() => import('@/components/charts/AdvancedCharts'));\nconst DataExportModal = lazy(() => import('@/components/modals/DataExportModal'));\nconst SettingsModal = lazy(() => import('@/components/modals/SettingsModal'));\n\n// Types for enhanced type safety\ninterface EnhancedTransaction {\n  id: string;\n  amount: number;\n  description: string;\n  category: string;\n  date: string;\n  createdAt: string;\n  type: 'income' | 'expense';\n  tags?: string[];\n  location?: string;\n  receipt?: string;\n}\n\ninterface DashboardProps {\n  initialData?: {\n    transactions?: EnhancedTransaction[];\n    balance?: number;\n    healthScore?: number;\n  };\n}\n\n/**\n * Enhanced Dashboard component with production-level features\n * \n * @param props - Component props\n * @returns JSX.Element\n */\nexport function EnhancedDashboard({ initialData }: DashboardProps) {\n  // Performance monitoring setup\n  const { trackAction, recordMetric } = {\n    trackAction: (action: string, metadata?: Record<string, any>) => {\n      userActionTracker.trackAction(action, 'Dashboard', metadata);\n    },\n    recordMetric: (name: string, value: number, tags?: Record<string, string>) => {\n      performanceMonitor.recordMetric(name, value, { component: 'Dashboard', ...tags });\n    },\n  };\n\n  // Context and state management\n  const { state, addNotification, addUndoAction } = useAppContext();\n  const [isLoading, setIsLoading] = useState(true);\n  const [transactions, setTransactions] = useState<EnhancedTransaction[]>(initialData?.transactions || []);\n  const [balance, setBalance] = useState(initialData?.balance || 0);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [showSettingsModal, setShowSettingsModal] = useState(false);\n\n  /**\n   * Initialize dashboard with performance tracking\n   */\n  useEffect(() => {\n    const initTimer = performanceMonitor.startTimer('dashboard_init');\n    \n    const initializeDashboard = async () => {\n      try {\n        // Track initialization start\n        trackAction('dashboard_init_start');\n        \n        // Load data from offline storage if available\n        if (isOffline) {\n          const offlineTransactions = await OfflineStorage.getTransactions();\n          if (offlineTransactions.length > 0) {\n            setTransactions(offlineTransactions);\n            addNotification({\n              type: 'info',\n              title: 'Offline Mode',\n              message: 'Using cached data while offline',\n              priority: 'medium',\n            });\n          }\n        } else {\n          // Load fresh data from API\n          await loadDashboardData();\n        }\n        \n        // Track successful initialization\n        trackAction('dashboard_init_success');\n        recordMetric('dashboard_load_time', performance.now());\n        \n      } catch (error) {\n        errorLogger.logError(\n          'Failed to initialize dashboard',\n          error as Error,\n          'error',\n          { component: 'Dashboard', action: 'initialization' }\n        );\n        \n        addNotification({\n          type: 'error',\n          title: 'Initialization Error',\n          message: 'Failed to load dashboard data',\n          priority: 'high',\n        });\n      } finally {\n        setIsLoading(false);\n        initTimer(); // Complete timing\n      }\n    };\n\n    initializeDashboard();\n  }, [isOffline]);\n\n  /**\n   * Load dashboard data with error handling and caching\n   */\n  const loadDashboardData = useCallback(async () => {\n    const loadTimer = performanceMonitor.startTimer('data_load');\n    \n    try {\n      const [transactionsResponse, balanceResponse] = await Promise.all([\n        fetch('/api/transactions'),\n        fetch('/api/user/balance'),\n      ]);\n\n      if (!transactionsResponse.ok || !balanceResponse.ok) {\n        throw new Error('Failed to fetch dashboard data');\n      }\n\n      const transactionsData = await transactionsResponse.json();\n      const balanceData = await balanceResponse.json();\n\n      // Sanitize data for security\n      const sanitizedTransactions = transactionsData.transactions?.map((t: any) => ({\n        ...t,\n        description: InputSanitizer.sanitizeString(t.description, { stripXss: true }).sanitizedValue,\n        category: InputSanitizer.sanitizeString(t.category, { stripXss: true }).sanitizedValue,\n      })) || [];\n\n      setTransactions(sanitizedTransactions);\n      setBalance(balanceData.balance || 0);\n\n      // Cache data for offline use\n      await OfflineStorage.bulkPut('transactions', sanitizedTransactions);\n      await OfflineStorage.saveAppState('user_balance', balanceData.balance);\n\n      recordMetric('api_success_rate', 1, { endpoint: 'dashboard' });\n    } catch (error) {\n      errorLogger.logApiError(\n        '/api/dashboard',\n        0,\n        error,\n        { action: 'load_dashboard_data' }\n      );\n      \n      recordMetric('api_error_rate', 1, { endpoint: 'dashboard' });\n      throw error;\n    } finally {\n      loadTimer();\n    }\n  }, []);\n\n  /**\n   * Add new transaction with comprehensive validation and tracking\n   */\n  const addTransaction = useCallback(async (transactionData: Partial<EnhancedTransaction>) => {\n    const addTimer = performanceMonitor.startTimer('add_transaction');\n    \n    try {\n      // Validate input data\n      const amountValidation = InputSanitizer.sanitizeNumber(transactionData.amount, {\n        positive: true,\n        max: 999999.99,\n        required: true,\n      });\n      \n      const descriptionValidation = InputSanitizer.sanitizeString(transactionData.description, {\n        maxLength: 200,\n        required: true,\n        stripXss: true,\n      });\n\n      if (!amountValidation.isValid || !descriptionValidation.isValid) {\n        const errors = [...amountValidation.errors, ...descriptionValidation.errors];\n        throw new Error(`Validation failed: ${errors.join(', ')}`);\n      }\n\n      const sanitizedTransaction: EnhancedTransaction = {\n        id: SecurityUtils.generateSecureId(),\n        amount: amountValidation.sanitizedValue!,\n        description: descriptionValidation.sanitizedValue!,\n        category: transactionData.category || 'general',\n        date: new Date().toISOString(),\n        createdAt: new Date().toISOString(),\n        type: transactionData.type || 'expense',\n      };\n\n      // Optimistic update\n      setTransactions(prev => [sanitizedTransaction, ...prev]);\n      \n      // Update balance\n      const balanceChange = sanitizedTransaction.type === 'income' \n        ? sanitizedTransaction.amount \n        : -sanitizedTransaction.amount;\n      \n      setBalance(prev => prev + balanceChange);\n\n      // Add to undo stack\n      addUndoAction({\n        type: 'CREATE',\n        entity: 'transaction',\n        description: `Add ${sanitizedTransaction.type}: ${sanitizedTransaction.description}`,\n        data: { after: sanitizedTransaction },\n      });\n\n      // Save to API and offline storage\n      const promises = [\n        OfflineStorage.saveTransaction(sanitizedTransaction),\n      ];\n\n      if (!isOffline) {\n        promises.push(\n          fetch('/api/transactions', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(sanitizedTransaction),\n          }).then(response => {\n            if (!response.ok) {\n              throw new Error('Failed to save transaction');\n            }\n            return response.json();\n          })\n        );\n      }\n\n      await Promise.all(promises);\n\n      trackAction('transaction_added', {\n        type: sanitizedTransaction.type,\n        amount: sanitizedTransaction.amount,\n        category: sanitizedTransaction.category,\n      });\n\n      addNotification({\n        type: 'success',\n        title: 'Transaction Added',\n        message: `${sanitizedTransaction.type} of ${sanitizedTransaction.amount} added successfully`,\n        priority: 'low',\n      });\n\n      recordMetric('transaction_add_success', 1);\n    } catch (error) {\n      errorLogger.logError(\n        'Failed to add transaction',\n        error as Error,\n        'error',\n        {\n          transactionData,\n          securityScore: amountValidation?.securityScore || 0,\n        }\n      );\n\n      addNotification({\n        type: 'error',\n        title: 'Transaction Error',\n        message: 'Failed to add transaction. Please try again.',\n        priority: 'high',\n      });\n\n      recordMetric('transaction_add_error', 1);\n    } finally {\n      addTimer();\n    }\n  }, [isOffline, addNotification, addUndoAction, trackAction]);\n\n  /**\n   * Handle offline/online state changes\n   */\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOffline(false);\n      addNotification({\n        type: 'success',\n        title: 'Back Online',\n        message: 'Syncing data...',\n        priority: 'medium',\n      });\n      // Trigger sync of offline data\n      syncOfflineData();\n    };\n\n    const handleOffline = () => {\n      setIsOffline(true);\n      addNotification({\n        type: 'warning',\n        title: 'Offline Mode',\n        message: 'Data will be synced when connection returns',\n        priority: 'medium',\n      });\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [addNotification]);\n\n  /**\n   * Sync offline data when connection returns\n   */\n  const syncOfflineData = useCallback(async () => {\n    try {\n      const pendingSync = await OfflineStorage.getPendingSyncOperations();\n      \n      if (pendingSync.length > 0) {\n        trackAction('offline_sync_start', { operations: pendingSync.length });\n        \n        for (const operation of pendingSync) {\n          // Process sync operation\n          // This would include API calls to sync the data\n          await OfflineStorage.markSyncCompleted(operation.id);\n        }\n        \n        addNotification({\n          type: 'success',\n          title: 'Sync Complete',\n          message: `${pendingSync.length} operations synced`,\n          priority: 'low',\n        });\n        \n        trackAction('offline_sync_complete', { operations: pendingSync.length });\n      }\n    } catch (error) {\n      errorLogger.logError(\n        'Failed to sync offline data',\n        error as Error,\n        'error',\n        { action: 'offline_sync' }\n      );\n    }\n  }, [addNotification, trackAction]);\n\n  /**\n   * Export data functionality\n   */\n  const handleExportData = useCallback(() => {\n    trackAction('export_data_requested');\n    setShowExportModal(true);\n  }, [trackAction]);\n\n  /**\n   * Settings functionality\n   */\n  const handleShowSettings = useCallback(() => {\n    trackAction('settings_opened');\n    setShowSettingsModal(true);\n  }, [trackAction]);\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n        <DashboardSkeleton />\n      </div>\n    );\n  }\n\n  return (\n    <HelpProvider>\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n        {/* Header with Quick Actions */}\n        <header className=\"glass-card m-6 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                🌟 Astral Money\n              </h1>\n              {isOffline && (\n                <div className=\"px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium\">\n                  📡 Offline Mode\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Tooltip content=\"Current account balance\">\n                <div className=\"text-right\">\n                  <div className=\"text-sm text-gray-600\">Balance</div>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    ${balance.toFixed(2)}\n                  </div>\n                </div>\n              </Tooltip>\n              \n              <QuickActions\n                onAddExpense={() => addTransaction({ type: 'expense' })}\n                onAddIncome={() => addTransaction({ type: 'income' })}\n                onAddRecurringBill={() => {}}\n                onViewReports={() => {}}\n                onExportData={handleExportData}\n                onShowSettings={handleShowSettings}\n              />\n              \n              <HelpButton />\n            </div>\n          </div>\n        </header>\n\n        {/* Main Dashboard Content */}\n        <main className=\"p-6\">\n          {/* Key Metrics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <div className=\"glass-card p-6 interactive-hover\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">\n                  Monthly Income\n                </h3>\n                <span className=\"text-2xl\">💰</span>\n              </div>\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                ${transactions\n                  .filter(t => t.type === 'income')\n                  .reduce((sum, t) => sum + t.amount, 0)\n                  .toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                +12% from last month\n              </div>\n            </div>\n\n            <div className=\"glass-card p-6 interactive-hover\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">\n                  Monthly Expenses\n                </h3>\n                <span className=\"text-2xl\">💸</span>\n              </div>\n              <div className=\"text-3xl font-bold text-red-600 mb-2\">\n                ${transactions\n                  .filter(t => t.type === 'expense')\n                  .reduce((sum, t) => sum + t.amount, 0)\n                  .toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                -5% from last month\n              </div>\n            </div>\n\n            <div className=\"glass-card p-6 interactive-hover\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">\n                  Financial Health\n                </h3>\n                <span className=\"text-2xl\">🎯</span>\n              </div>\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                {Math.min(100, Math.max(0, Math.round(\n                  ((transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0) - \n                    transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0)) / \n                   Math.max(1, transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0))) * 100\n                )))}%\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                Excellent score!\n              </div>\n            </div>\n\n            <div className=\"glass-card p-6 interactive-hover\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">\n                  Transactions\n                </h3>\n                <span className=\"text-2xl\">📊</span>\n              </div>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                {transactions.length}\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                This month\n              </div>\n            </div>\n          </div>\n\n          {/* Charts Section */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n            <div className=\"glass-card p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                📈 Spending Trends\n              </h3>\n              <Suspense fallback={<LoadingSpinner size=\"large\" />}>\n                <AdvancedCharts data={transactions} type=\"spending\" />\n              </Suspense>\n            </div>\n\n            <div className=\"glass-card p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                🎯 Category Breakdown\n              </h3>\n              <Suspense fallback={<LoadingSpinner size=\"large\" />}>\n                <AdvancedCharts data={transactions} type=\"categories\" />\n              </Suspense>\n            </div>\n          </div>\n\n          {/* Recent Transactions */}\n          <div className=\"glass-card p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                💳 Recent Transactions\n              </h3>\n              <button className=\"glass-button text-sm\">\n                View All\n              </button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {transactions.slice(0, 5).map((transaction) => (\n                <div key={transaction.id} className=\"flex items-center justify-between p-4 bg-white/50 rounded-lg border border-white/20\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                      transaction.type === 'income' \n                        ? 'bg-green-100 text-green-600' \n                        : 'bg-red-100 text-red-600'\n                    }`}>\n                      {transaction.type === 'income' ? '💰' : '💸'}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-900\">\n                        {transaction.description}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {transaction.category} • {new Date(transaction.date).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </div>\n                  <div className={`text-lg font-semibold ${\n                    transaction.type === 'income' ? 'text-green-600' : 'text-red-600'\n                  }`}>\n                    {transaction.type === 'income' ? '+' : '-'}${transaction.amount.toFixed(2)}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </main>\n\n        {/* Modals */}\n        <Suspense fallback={null}>\n          {showExportModal && (\n            <DataExportModal\n              isOpen={showExportModal}\n              onClose={() => setShowExportModal(false)}\n              data={transactions}\n            />\n          )}\n          {showSettingsModal && (\n            <SettingsModal\n              isOpen={showSettingsModal}\n              onClose={() => setShowSettingsModal(false)}\n            />\n          )}\n        </Suspense>\n      </div>\n    </HelpProvider>\n  );\n}\n\nexport default EnhancedDashboard;